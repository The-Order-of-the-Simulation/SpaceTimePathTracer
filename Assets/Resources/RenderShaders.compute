#pragma enable_d3d11_debug_symbols

#pragma kernel Render RENDER


int iFrame;
float Accumulation;

#include<Utils.cginc>
#include<GeodesicUtils.cginc>

#define RENDER_THREADBLOCK 16
#define RAY_MARCHING_MAX_STEPS 128
#define RAY_MARCHING_CONE_ANGLE 0.005
#define RAY_MARCHING_HIT_THRESHOLD 0.1
#define RAY_MARCHING_MAX_DISTANCE 5000.0

#define PATH_TRACE_DEPTH 4

#define GEODESIC_TRACE

#ifdef RENDER

float3 BackgroundColor;

TextureCube<float3> Background;
SamplerState samplerBackground;

Texture2D<float4> Previous;
SamplerState samplerPrevious;

RWTexture2D<float4> Target;

float4 SamplePrevious(float2 uv)
{
    return Previous.SampleLevel(samplerPrevious, uv, 0);
}

float3 SampleBackground(float3 dir)
{
    return Background.SampleLevel(samplerBackground, dir, 0);
}

int TraceRay(inout Ray r)
{
    float depth = 0.0;
    int hit_object = -1;

    SpaceTimeRay sr;

    sr.Q = float4(0., r.origin);
    sr.Qt = float4(1, 0, 0, 0);
    sr.P = normalize(Vec2P(r.direction, sr.Q.yzw));
    sr.Dir = r.direction;

    float4 Dsphere = 0.0;

    for (int i = 0; i < RAY_MARCHING_MAX_STEPS; i++)
    {
        int ID = 0;
        float sdf = SceneSDF(sr.Q.yzw, ID);
        Dsphere = float4(sr.Q.yzw, sdf);

 #ifdef GEODESIC_TRACE
        if (hstep(sr, abs(sdf))) //integrate geodesic
        {
            hit_object = -2; //event horizon
            break;
        }
#else
        sr.Q.yzw += sdf*sr.Dir;
#endif

        depth = distance(sr.Q.yzw, r.origin);

        float min_distance = max(RAY_MARCHING_CONE_ANGLE * (r.distance + depth), RAY_MARCHING_HIT_THRESHOLD);
        if(sdf < min_distance)
        {
            hit_object = ID;
            depth -= min_distance;
            sr.Q.yzw -= sr.Dir * min_distance;
            break;
        }
        if ((r.distance + depth) > RAY_MARCHING_MAX_DISTANCE)
        {
            break;
        }
    }

    r.distance += depth;
    r.origin = sr.Q.yzw;
    r.direction = sr.Dir;

    return hit_object;
}

float4 PathTrace(inout Ray r)
{
    float3 col = 0.0; //incoming light into the camera
    float3 att = 1.0; //total light attenuation 

    for (int i = 0; i < PATH_TRACE_DEPTH; i++)
    {
        int hit = TraceRay(r);
        if (hit >= 0) //has hit an object
        {
            Material mat = SDFMaterials[SDFObjects[hit].Material];
            float3 normal = Normal(r.origin, hit);

            att *= mat.color;
            col += att*mat.glow;

            r.origin += normal * RAY_MARCHING_CONE_ANGLE * r.distance;

            float3 refl_ray = reflect(r.direction, normal);
            r.direction = normalize(nrand3(mat.roughness, refl_ray));
        }
        else //trace exit
        {
            if (hit == -1) col += BackgroundColor * att * SampleBackground(r.direction);
            break;
        }
    }

    return float4(col,1.0);
}


[numthreads(RENDER_THREADBLOCK, RENDER_THREADBLOCK, 1)]
void Render(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
    uint2 pix = DTid.xy;

    InitializeRand(iFrame, pix);

    Ray camera_ray = computeCameraRay(pix + rand2());

    Ray path_ray = camera_ray;

    float4 prev_col = Previous[pix];

    float4 col = PathTrace(path_ray);

    Target[pix] = col + prev_col * Accumulation;
}

#endif //RENDER