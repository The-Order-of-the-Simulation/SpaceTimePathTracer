#pragma enable_d3d11_debug_symbols

#pragma kernel Render RENDER

#define RENDER_THREADBLOCK 16
#define RAY_MARCHING_MAX_STEPS 256
#define RAY_MARCHING_CONE_ANGLE 0.005
#define RAY_MARCHING_HIT_THRESHOLD 0.001
#define RAY_MARCHING_MAX_DISTANCE 100.0

int iFrame;
float Accumulation;

#include<Utils.cginc>

#ifdef RENDER

#define RAY_MARCHING_MAX_STEPS 256

Texture2D<float4> Previus;
RWTexture2D<float4> Target;

[numthreads(RENDER_THREADBLOCK, RENDER_THREADBLOCK, 1)]
void Render(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
    uint2 pix = DTid.xy;

    Ray ray = computeCameraRay(pix);

    float depth = 0.0;
    int hit_object = -1;

    for (int i = 0; i < RAY_MARCHING_MAX_STEPS; i++)
    {
        int ID = 0;
        float sdf = SceneSDF(ray.origin + ray.direction * depth, ID);
        depth += sdf;
        if(sdf < max(RAY_MARCHING_CONE_ANGLE * depth, RAY_MARCHING_HIT_THRESHOLD))
        {
            hit_object = ID;
            break;
        }
        if (depth > RAY_MARCHING_MAX_DISTANCE)
        {
            break;
        }
    }

    float3 pos = ray.origin + ray.direction * depth;
    float3 col = abs(pos)/10.0;

    Target[pix] = float4(col, 1.0);
}

#endif //RENDER